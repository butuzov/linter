// Code generated by generate-tests; DO NOT EDIT.

package main

import (
	"regexp"
	. "regexp"
	pkg "regexp"
)

var (
	regexp1 Regexp
	regexp2 pkg.Regexp
	regexp3 regexp.Regexp
)

func main_regexp() {
	{
		
		_,_ = regexp.Match("foo", []byte("foobar")) // want `this call can be optimized with regexp\.MatchString`
	}

	{
		
		_,_ = regexp.Match("foo", []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_,_ = Match("foo", []byte("foobar")) // want `this call can be optimized with regexp\.MatchString`
	}

	{
		
		_,_ = Match("foo", []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_,_ = pkg.Match("foo", []byte("foobar")) // want `this call can be optimized with regexp\.MatchString`
	}

	{
		
		_,_ = pkg.Match("foo", []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_,_ = regexp.MatchString("foo", string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with regexp\.Match`
	}

	{
		
		_,_ = regexp.MatchString("foo", "foobar") 
	}

	{
		
		_,_ = MatchString("foo", string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with regexp\.Match`
	}

	{
		
		_,_ = MatchString("foo", "foobar") 
	}

	{
		
		_,_ = pkg.MatchString("foo", string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with regexp\.Match`
	}

	{
		
		_,_ = pkg.MatchString("foo", "foobar") 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllIndex([]byte("foobar"), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllStringIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllIndex([]byte{'f','o','o','b','a','r'}, 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllIndex([]byte("foobar"), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllStringIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllIndex([]byte{'f','o','o','b','a','r'}, 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllIndex([]byte("foobar"), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllStringIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllIndex([]byte{'f','o','o','b','a','r'}, 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringIndex(string([]byte{'f','o','o','b','a','r'}), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringIndex("foobar", 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringIndex(string([]byte{'f','o','o','b','a','r'}), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringIndex("foobar", 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringIndex(string([]byte{'f','o','o','b','a','r'}), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringIndex("foobar", 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringSubmatchIndex(string([]byte{'f','o','o','b','a','r'}), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringSubmatchIndex("foobar", 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringSubmatchIndex(string([]byte{'f','o','o','b','a','r'}), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringSubmatchIndex("foobar", 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringSubmatchIndex(string([]byte{'f','o','o','b','a','r'}), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllStringSubmatchIndex("foobar", 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllSubmatchIndex([]byte("foobar"), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllStringSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllSubmatchIndex([]byte{'f','o','o','b','a','r'}, 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllSubmatchIndex([]byte("foobar"), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllStringSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllSubmatchIndex([]byte{'f','o','o','b','a','r'}, 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllSubmatchIndex([]byte("foobar"), 1) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindAllStringSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindAllSubmatchIndex([]byte{'f','o','o','b','a','r'}, 1) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindIndex([]byte("foobar")) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindStringIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindIndex([]byte{'f','o','o','b','a','r'}) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindIndex([]byte("foobar")) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindStringIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindIndex([]byte{'f','o','o','b','a','r'}) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindIndex([]byte("foobar")) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindStringIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindIndex([]byte{'f','o','o','b','a','r'}) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringIndex(string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindStringIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringIndex("foobar") 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringIndex(string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindStringIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringIndex("foobar") 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringIndex(string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindStringIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringIndex("foobar") 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringSubmatchIndex(string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringSubmatchIndex("foobar") 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringSubmatchIndex(string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringSubmatchIndex("foobar") 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringSubmatchIndex(string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindStringSubmatchIndex("foobar") 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindSubmatchIndex([]byte("foobar")) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindStringSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindSubmatchIndex([]byte{'f','o','o','b','a','r'}) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindSubmatchIndex([]byte("foobar")) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindStringSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindSubmatchIndex([]byte{'f','o','o','b','a','r'}) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindSubmatchIndex([]byte("foobar")) // want `this call can be optimized with \(\*regexp\.Regexp\)\.FindStringSubmatchIndex`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.FindSubmatchIndex([]byte{'f','o','o','b','a','r'}) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.Match([]byte("foobar")) // want `this call can be optimized with \(\*regexp\.Regexp\)\.MatchString`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.Match([]byte{'f','o','o','b','a','r'}) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.Match([]byte("foobar")) // want `this call can be optimized with \(\*regexp\.Regexp\)\.MatchString`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.Match([]byte{'f','o','o','b','a','r'}) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.Match([]byte("foobar")) // want `this call can be optimized with \(\*regexp\.Regexp\)\.MatchString`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.Match([]byte{'f','o','o','b','a','r'}) 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.MatchString(string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with \(\*regexp\.Regexp\)\.Match`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.MatchString("foobar") 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.MatchString(string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with \(\*regexp\.Regexp\)\.Match`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.MatchString("foobar") 
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.MatchString(string([]byte{'f','o','o','b','a','r'})) // want `this call can be optimized with \(\*regexp\.Regexp\)\.Match`
	}

	{
		re := regexp.MustCompile(".*")
		_ = re.MatchString("foobar") 
	}

}
